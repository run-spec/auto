param([switch]$AutoStart)

# Hide PowerShell console window
Add-Type -Name Window -Namespace Console -MemberDefinition '
[DllImport("Kernel32.dll")]
public static extern IntPtr GetConsoleWindow();

[DllImport("user32.dll")]
public static extern bool ShowWindow(IntPtr hWnd, Int32 nCmdShow);
'

$consoleWindow = [Console.Window]::GetConsoleWindow()
[Console.Window]::ShowWindow($consoleWindow, 0) | Out-Null

Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing
Add-Type -AssemblyName PresentationFramework

$ScriptPath = $MyInvocation.MyCommand.Path
$ScriptDir  = Split-Path -Parent $ScriptPath

# Your Monero wallet address - REPLACE WITH YOUR OWN
$WalletAddress = "437kg8epTG59BpCHXSHVkiAx7S7oawgkeLjPyga1fX8Ca48wmWueu8uiovHZPT1oVGf4MEjvkhypMh3fvgb1cX69GKQwXMp"

$PoolUrl = "pool.supportxmr.com:3333"
$PoolPassword = "x"

function promptAdminRights {
    Add-Type -AssemblyName System.Windows.Forms
    $global:balmsg = New-Object System.Windows.Forms.NotifyIcon
    $path = (Get-Process -id $pid).Path
    $balmsg.Icon = [System.Drawing.Icon]::ExtractAssociatedIcon($path)
    $balmsg.BalloonTipIcon = [System.Windows.Forms.ToolTipIcon]::Info
    $balmsg.BalloonTipText = "Monero mining setup requires administrator privileges"
    $balmsg.BalloonTipTitle = "XMRig Mining Setup"
    $balmsg.Visible = $true
    $balmsg.ShowBalloonTip(5000)
    $balmsg.dispose()
    
    $msgBoxInput = [System.Windows.MessageBox]::Show("This script will set up automated Monero mining on your PC.`r`n`r`nIt needs administrator privileges to:`r`n- Download XMRig mining software`r`n- Configure firewall exceptions`r`n- Create startup task`r`n`r`nContinue?",'Monero Mining Setup','YesNo','Question')
    
    switch ($msgBoxInput) {
        'Yes' {
            Start-Process powershell "-WindowStyle Hidden -NoProfile -ExecutionPolicy Bypass -File `"$PSCommandPath`"" -Verb RunAs
        }
        'No' {
            Write-Host "Mining setup cancelled by user"
            exit
        }
    }
}

function setupFirewallException {
    # Instead of disabling firewall, add specific exception
    $xmrigPath = Join-Path $ScriptDir "xmrig-6.24.0\xmrig.exe"
    
    try {
        # Remove existing rule if it exists
        Remove-NetFirewallRule -DisplayName "XMRig Miner" -ErrorAction SilentlyContinue
        
        # Add new firewall rule for XMRig
        New-NetFirewallRule -DisplayName "XMRig Miner" -Direction Outbound -Program $xmrigPath -Action Allow -Profile Any | Out-Null
    }
    catch {
        # Silent failure
    }
}

function downloadAndSetupXMRig {
    $download = "https://github.com/xmrig/xmrig/releases/download/v6.24.0/xmrig-6.24.0-windows-x64.zip"
    $outputPath = Join-Path $ScriptDir "xmrig.zip"
    $destinationPath = $ScriptDir

    try {
        $wc = New-Object System.Net.WebClient
        $wc.DownloadFile($download, $outputPath)
        
        if (!(Test-Path $outputPath)) {
            throw "Download failed"
        }
        
        # Extract the zip
        Expand-Archive -LiteralPath $outputPath -DestinationPath $destinationPath -Force
        
        # Clean up zip file
        Remove-Item -Path $outputPath
        
        return $true
    }
    catch {
        return $false
    }
}

function startMining {
    $xmrigPath = Join-Path $ScriptDir "xmrig-6.24.0\xmrig.exe"
    
    if (!(Test-Path $xmrigPath)) {
        return $false
    }
    
    # Define log file paths
    $logPath = Join-Path $ScriptDir "mining.log"
    
    try {
        # Start XMRig completely hidden
        $processInfo = New-Object System.Diagnostics.ProcessStartInfo
        $processInfo.FileName = $xmrigPath
        $processInfo.Arguments = "-o $PoolUrl -u $WalletAddress -p $PoolPassword --log-file=$logPath"
        $processInfo.UseShellExecute = $false
        $processInfo.CreateNoWindow = $true
        $processInfo.WindowStyle = [System.Diagnostics.ProcessWindowStyle]::Hidden
        
        [System.Diagnostics.Process]::Start($processInfo) | Out-Null
        
        return $true
    }
    catch {
        return $false
    }
}

function createStartupTask {
    try {
        # Remove existing task if it exists
        Unregister-ScheduledTask -TaskName "MoneroMining" -Confirm:$false -ErrorAction SilentlyContinue
        
        # Create new task
        $action = New-ScheduledTaskAction -Execute "powershell.exe" -Argument "-WindowStyle Hidden -NoProfile -ExecutionPolicy Bypass -File `"$PSCommandPath`" -AutoStart"
        $trigger = New-ScheduledTaskTrigger -AtStartup -RandomDelay (New-TimeSpan -Seconds 30)
        $settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable
        
        Register-ScheduledTask -TaskName "MoneroMining" -Action $action -Trigger $trigger -Settings $settings -User "SYSTEM" | Out-Null
        
    }
    catch {
        # Silent failure
    }
}

function runMainScript {
    # Setup firewall exception
    setupFirewallException
    
    # Download and setup XMRig if not already present
    $xmrigPath = Join-Path $ScriptDir "xmrig-6.24.0\xmrig.exe"
    if (!(Test-Path $xmrigPath)) {
        downloadAndSetupXMRig | Out-Null
    }
    
    # Start mining and create startup task
    startMining | Out-Null
    createStartupTask
}

# Handle auto-start parameter for scheduled task
if ($AutoStart) {
    # This is being run by the scheduled task - completely silent
    $xmrigPath = Join-Path $ScriptDir "xmrig-6.24.0\xmrig.exe"
    if (Test-Path $xmrigPath) {
        startMining | Out-Null
    }
    exit
}

# Check for admin rights
if (!([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
    promptAdminRights
} else {
    runMainScript
}
